{"version":3,"sources":["store/actions.js","store/sagas/ApiErrors.js","store/sagas/index.js","store/reducers/Weather.js","components/SplitButton.js","components/Charts.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["API_ERROR","apiErrorReceived","watchApiError","action","regenerator_default","a","wrap","_context","prev","next","call","toast","error","concat","stop","_marked","_context2","takeEvery","actions","_marked2","ApiErrors","sagas","Object","toConsumableArray","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","index","handlers","_handlers","defineProperty","state","c","getWeatherForLocation","selectedIndex","Weather","arguments","length","undefined","handler","type","options","client","createClient","url","components_SplitButton","react_default","createElement","urql_es","value","SplitButton_SplitButton","SplitButton","_React$useState","React","useState","_React$useState2","slicedToArray","open","setOpen","anchorRef","useRef","_React$useState3","_React$useState4","setSelectedIndex","dispatch","useDispatch","latLong","latitude","longitude","_useQuery","useQuery","query","variables","pollInterval","requestPolicy","result","data","useEffect","message","handleClose","event","current","contains","target","Grid","container","item","xs","align","ButtonGroup","variant","color","ref","aria-label","Button","onClick","alert","size","aria-owns","aria-haspopup","prevOpen","ArrowDropDown_default","Popper","anchorEl","transition","disablePortal","_ref","TransitionProps","placement","Grow","assign","style","transformOrigin","Paper","id","ClickAwayListener","onClickAway","MenuList","map","option","MenuItem","key","disabled","selected","handleMenuItemClick","getWeather","_state$weather","weather","ray","Charts","_useSelector","useSelector","getDataFromProp","obj","name","Date","getHours","getMinutes","getSeconds","F","C","amt","push","shift","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","activeDot","r","store","rootReducer","combineReducers","weatherReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","forEach","run","theme","createMuiTheme","typography","useNextVariants","palette","primary","main","secondary","background","App","props","MuiThemeProvider","CssBaseline","es","components_Charts","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18102f6f.chunk.js","sourcesContent":["export const API_ERROR = \"EVENT/API_ERROR_RECEIVED\";\r\nexport const WEATHER_DATA_RECEIVED = \"EVENT/WEATHER_DATA_RECEIVED\";\r\n//New Action in order to render plot points based on button click\r\nexport const INDEX_RECEIVED = \"EVENT/INDEX_RECEIVED\";\r\n","import { takeEvery, call } from \"redux-saga/effects\";\r\nimport * as actions from \"../actions\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction* apiErrorReceived(action) {\r\n  yield call(toast.error, `Error Received: ${action.error}`);\r\n}\r\n\r\nfunction* watchApiError() {\r\n  yield takeEvery(actions.API_ERROR, apiErrorReceived);\r\n}\r\n\r\nexport default [watchApiError];\r\n","import ApiErrors from \"./ApiErrors\";\r\n\r\nexport default [...ApiErrors];\r\n","import * as actions from \"../actions\";\r\n\r\nconst initialState = {\r\n  temperatureinCelsius: null,\r\n  temperatureinFahrenheit: null,\r\n  description: \"\",\r\n  locationName: \"\",\r\n  index: 0\r\n};\r\n\r\nconst toF = c => (c * 9) / 5 + 32;\r\n\r\nconst weatherDataRecevied = (state, action) => {\r\n  const { getWeatherForLocation } = action;\r\n  const {\r\n    description,\r\n    locationName,\r\n    temperatureinCelsius\r\n  } = getWeatherForLocation;\r\n\r\n  return {\r\n    temperatureinCelsius,\r\n    temperatureinFahrenheit: toF(temperatureinCelsius),\r\n    description,\r\n    locationName\r\n  };\r\n};\r\n\r\nconst indexReceived = (state, action) => {\r\n  const { selectedIndex } = action;\r\n  \r\n  return {\r\n    temperatureinCelsius: initialState.temperatureinCelsius,\r\n    temperatureinFahrenheit: initialState.temperatureinFahrenheit,\r\n    description: initialState.description,\r\n    locationName: initialState,\r\n    index: selectedIndex\r\n  };\r\n}\r\n\r\nconst handlers = {\r\n  [actions.WEATHER_DATA_RECEIVED]: weatherDataRecevied,\r\n  [actions.INDEX_RECEIVED]: indexReceived\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  const handler = handlers[action.type];\r\n  if (typeof handler === \"undefined\") return state;\r\n\r\n  return handler(state, action);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Provider, createClient, useQuery } from \"urql\";\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst options = ['Houston', 'Dallas', 'San Antonio'];\r\n\r\nconst client = createClient({\r\n  url: \"https://react.eogresources.com/graphql\"\r\n});\r\n\r\nconst query = `\r\nquery($latLong: WeatherQuery!) {\r\n  getWeatherForLocation(latLong: $latLong) {\r\n    description\r\n    locationName\r\n    temperatureinCelsius\r\n  }\r\n}\r\n`;\r\n\r\nexport default () => {\r\n  return (\r\n    <Provider value={client}>\r\n      <SplitButton />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nconst SplitButton = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  // Default to houston\r\n  const latLong = {\r\n    latitude: 29.7604,\r\n    longitude: -95.3698\r\n  };\r\n\r\n  if(selectedIndex === 1){\r\n    latLong.latitude = 32.7767\r\n    latLong.longitude = -96.7970\r\n  } \r\n  if (selectedIndex === 2){\r\n    latLong.latitude = 29.4241\r\n    latLong.longitude = -98.4936\r\n  }\r\n\r\n  const [result] = useQuery({\r\n    query,\r\n    variables: {\r\n      latLong\r\n    },\r\n    pollInterval:1500,\r\n    requestPolicy: 'network-only'\r\n  });\r\n\r\n  const { data, error } = result;\r\n  useEffect(\r\n    () => {\r\n      if (error) {\r\n        dispatch({ type: actions.API_ERROR, error: error.message });\r\n        return;\r\n      }\r\n      if (!data) return;\r\n      const { getWeatherForLocation } = data;\r\n      dispatch({ type: actions.WEATHER_DATA_RECEIVED, getWeatherForLocation });\r\n    },\r\n    [dispatch, data, error]\r\n  );\r\n  \r\n  const handleClick = () => {\r\n    alert(`You clicked ${options[selectedIndex]}`);\r\n    dispatch({ type: actions.INDEX_RECEIVED, selectedIndex });\r\n  };\r\n\r\n  const handleMenuItemClick = (event, index) => {\r\n    setSelectedIndex(index);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen(prevOpen => !prevOpen);\r\n  };\r\n\r\n  const handleClose = event => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n      <Grid container>\r\n        <Grid item xs={12} align=\"center\">\r\n          <ButtonGroup variant=\"contained\" color=\"primary\" ref={anchorRef} aria-label=\"split button\">\r\n            <Button onClick={handleClick}>{options[selectedIndex]}</Button>\r\n            <Button\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              aria-owns={open ? 'menu-list-grow' : undefined}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleToggle}\r\n            >\r\n              <ArrowDropDownIcon />\r\n            </Button>\r\n          </ButtonGroup>\r\n          <Popper open={open} anchorEl={anchorRef.current} transition disablePortal>\r\n            {({ TransitionProps, placement }) => (\r\n              <Grow\r\n                {...TransitionProps}\r\n                style={{\r\n                  transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                }}\r\n              >\r\n                <Paper id=\"menu-list-grow\">\r\n                  <ClickAwayListener onClickAway={handleClose}>\r\n                    <MenuList>\r\n                      {options.map((option, index) => (\r\n                        <MenuItem\r\n                          key={option}\r\n                          disabled={index === 3}\r\n                          selected={index === selectedIndex}\r\n                          onClick={event => handleMenuItemClick(event, index)}\r\n                        >\r\n                          {option}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </MenuList>\r\n                  </ClickAwayListener>\r\n                </Paper>\r\n              </Grow>\r\n            )}\r\n          </Popper>\r\n        </Grid>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n      </Grid>\r\n      \r\n  );\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\n\r\nconst getWeather = state => {\r\n  const { temperatureinFahrenheit, temperatureinCelsius, description, locationName } = state.weather;\r\n  return {\r\n    temperatureinFahrenheit,\r\n    temperatureinCelsius,\r\n    description,\r\n    locationName,\r\n  };\r\n};\r\n\r\nlet ray = [];\r\n\r\nconst Charts = () => {\r\n  const { temperatureinFahrenheit, temperatureinCelsius } = useSelector(\r\n    getWeather\r\n  );\r\n\r\n  const getDataFromProp = (ray) => {\r\n    const rightNow = new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds();\r\n\r\n    const obj = {\r\n      name: rightNow,\r\n      F: temperatureinFahrenheit,\r\n      C: temperatureinCelsius, \r\n      amt: 0,\r\n    }\r\n\r\n    ray.push(obj);\r\n\r\n    if(ray.length >= 7){\r\n      ray.shift();\r\n    }\r\n\r\n    return ray;\r\n  }\r\n\r\n  ray = getDataFromProp(ray)\r\n\r\n  return (\r\n    <LineChart\r\n      width={700}\r\n      height={300}\r\n      data={getDataFromProp(ray)}\r\n      margin={{\r\n        top: 5, right: 30, left: 20, bottom: 5,\r\n      }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"name\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey=\"C\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n      <Line type=\"monotone\" dataKey=\"F\" stroke=\"#82ca9d\" />\r\n    </LineChart>\r\n  );\r\n}\r\n\r\nexport default Charts;","import React from \"react\";\r\nimport createStore from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport SplitButton from './components/SplitButton'\r\nimport Charts from './components/Charts'\r\n\r\nconst store = createStore();\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: \"rgb(39,49,66)\"\r\n    },\r\n    secondary: {\r\n      main: \"rgb(197,208,222)\"\r\n    },\r\n    background: {\r\n      main: \"rgb(226,231,238)\"\r\n    }\r\n  }\r\n});\r\n\r\nconst App = props => (\r\n  <MuiThemeProvider theme={theme}>\r\n    <CssBaseline />\r\n    <Provider store={store}>\r\n      <SplitButton />\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <Charts/>\r\n    </Provider>\r\n   </MuiThemeProvider>\r\n)\r\n\r\nexport default App;\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport sagas from \"./sagas\";\r\nimport weatherReducer from \"./reducers/Weather\";\r\n\r\nexport default () => {\r\n  const rootReducer = combineReducers({\r\n    weather: weatherReducer\r\n  });\r\n\r\n  const composeEnhancers = composeWithDevTools({});\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = applyMiddleware(sagaMiddleware);\r\n  const store = createStore(rootReducer, composeEnhancers(middlewares));\r\n\r\n  sagas.forEach(sagaMiddleware.run);\r\n\r\n  return store;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}